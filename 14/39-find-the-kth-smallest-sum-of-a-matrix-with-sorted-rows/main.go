package main

import (
	"fmt"
	"sort"
)

func main() {
	// fmt.Println(kthSmallest([][]int{{13, 88, 148, 211, 300, 330, 399}, {71, 123, 163, 229, 289, 346, 357}, {45, 47, 49, 75, 202, 241, 283}, {45, 48, 146, 231, 243, 372, 400}, {40, 192, 271, 279, 285, 308, 368}, {128, 137, 173, 221, 344, 361, 368}, {67, 107, 119, 281, 372, 384, 396}, {2, 6, 78, 102, 230, 265, 355}, {2, 69, 97, 134, 157, 331, 392}, {77, 147, 175, 213, 248, 336, 355}, {7, 58, 202, 275, 283, 339, 366}, {74, 101, 158, 162, 330, 363, 371}, {78, 138, 177, 177, 197, 204, 379}}, 50))
	fmt.Println(kthSmallest([][]int{{7, 11, 21, 29, 34, 98, 117, 158, 165, 215, 217, 279, 323, 371, 388, 390}, {24, 33, 48, 53, 55, 94, 149, 175, 217, 240, 243, 252, 291, 301, 332, 376}, {49, 59, 85, 105, 118, 174, 240, 253, 269, 287, 299, 300, 355, 356, 369, 387}, {11, 65, 66, 71, 78, 154, 222, 224, 283, 303, 315, 333, 355, 366, 389, 395}, {18, 25, 30, 111, 117, 122, 124, 129, 135, 145, 182, 192, 270, 289, 353, 369}, {50, 79, 79, 96, 117, 136, 190, 207, 210, 226, 246, 273, 295, 316, 372, 400}, {35, 44, 78, 80, 102, 155, 186, 188, 226, 236, 279, 281, 378, 383, 393, 394}, {26, 51, 118, 130, 133, 140, 146, 193, 196, 235, 262, 294, 314, 363, 365, 371}, {30, 34, 67, 77, 83, 111, 185, 198, 234, 238, 248, 251, 264, 291, 308, 341}, {9, 15, 27, 80, 101, 102, 105, 119, 140, 146, 160, 174, 247, 260, 262, 293}, {10, 13, 35, 42, 42, 94, 110, 112, 161, 237, 239, 256, 262, 290, 339, 343}, {1, 31, 53, 74, 78, 98, 110, 133, 142, 154, 222, 228, 292, 294, 352, 364}, {40, 72, 90, 95, 112, 157, 169, 179, 191, 192, 216, 220, 235, 288, 290, 306}, {7, 16, 40, 41, 41, 91, 100, 112, 158, 172, 188, 223, 302, 345, 357, 391}, {14, 18, 28, 49, 65, 72, 88, 129, 131, 238, 294, 330, 348, 356, 395, 399}, {34, 84, 115, 132, 154, 166, 175, 187, 188, 196, 230, 296, 312, 323, 329, 348}, {6, 31, 32, 38, 68, 84, 112, 116, 143, 187, 214, 255, 305, 306, 325, 353}}, 25))
}

func kthSmallest(mat [][]int, k int) int {
	type key struct {
		row    int
		remsum int
	}

	memo := map[key]int{}
	var search func(row, remsum int) int
	search = func(row, remsum int) int {
		if remsum < 0 {
			return 0
		}
		if row == len(mat) {
			return 1
		}
		k := key{row, remsum}
		if v, ok := memo[k]; ok {
			return v
		}

		res := 0
		for _, n := range mat[row] {
			res += search(row+1, remsum-n)
			if res > 200 {
				break
			}
		}
		memo[k] = res
		return res
	}

	max := 1
	for _, r := range mat {
		max += r[len(r)-1]
	}

	return sort.Search(max, func(remsum int) bool {
		return search(0, remsum) >= k
	})
}
